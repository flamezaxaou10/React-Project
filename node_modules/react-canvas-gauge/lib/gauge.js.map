{"version":3,"sources":["../src/gauge.js"],"names":["Gauge","props","getNewState","newProps","oldProps","enableRefresh","newState","style","Object","assign","WebkitUserSelect","MozUserSelect","isChange","state","size","theme","mode","sizeInfo","borderWidth","barWidth","colorInfo","title","value","unit","pen","background","defaultBar","centerCircle","text","graduation","border","getValueRate","scaleList","minValue","length","scaleNumber","intervalScale","tmpScale","tmpMinValue","tmpValue","i","quantity","scale","maxScaleValue","rateValue","parseFloat","toFixed","isChangeGauge","enableColorful","refreshContext","setState","drawProgress","valueRate","gaugeDOM","gaugue","width","height","gaugeCTX","getContext","gaugeHalfWidth","gaugeHalfHeight","radiusWidth","scaleInterval","lineCap","beginPath","lineWidth","fillStyle","arc","Math","PI","fill","font","textAlign","fillText","strokeStyle","stroke","startAngle","endAngle","startColor","endColor","isVauleInterval","newRadiusWidth","barColor","createLinearGradient","cos","sin","addColorStop","createRadialGradient","graduationPosition","graduationLength","graduationSize","graduationFontSize","floor","penHalfWidth","graduationValue","intervalAngle","j","angle","moveTo","lineTo","closePath","graduationText","valueAngle","borderColor","valueBefore","clearLastAnimator","animatorTimeout","clearTimeout","undefined","animator","lastValue","optr","finalValue","timeout","setTimeout","prevProps","enableAnimation","subValue","time","abs","animationTimeout","g","PureComponent","propTypes","PropTypes","object","oneOf","number","bool","string","arrayOf","shape","defaultProps"],"mappings":"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","file":"gauge.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Gauge extends PureComponent {\n  static propTypes = {\n    style: PropTypes.object,\n    theme: PropTypes.oneOf(['light', 'dark']),\n    mode: PropTypes.oneOf(['gauge', 'progress']),\n    size: PropTypes.number,\n    enableAnimation: PropTypes.bool,\n    animationTimeout: PropTypes.number,\n    enableColorful: PropTypes.bool,\n    title: PropTypes.string,\n    unit: PropTypes.string,\n    scaleList: PropTypes.arrayOf(PropTypes.shape({\n      scale: PropTypes.number,\n      quantity: PropTypes.number,\n      startColor: PropTypes.string,\n      endColor: PropTypes.string\n    })),\n    minValue: PropTypes.number,\n    value: PropTypes.number\n  };\n\n  static defaultProps = {\n    style: {},\n    theme: 'light',\n    mode: 'gauge',\n    size: 128,\n    enableAnimation: true,\n    animationTimeout: 250,\n    enableColorful: true,\n    title: '',\n    unit: '',\n    scaleList: [\n      { scale: 10, quantity: 5, startColor: '#ff2a04', endColor: 'orange' },\n      { scale: 10, quantity: 5, startColor: 'orange', endColor: '#32cd32' }\n    ],\n    minValue: 0,\n    value: 0\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = this.getNewState(props);\n  }\n\n  componentDidMount() {\n    const newState = this.getNewState(this.props, undefined, true);\n    this.drawProgress(this.getValueRate(), newState);\n    this.refreshContext(newState);\n  }\n\n  componentDidUpdate(prevProps) {\n    const newState = this.getNewState(this.props, prevProps);\n    const isChangeGauge = this.isChangeGauge(this.props, prevProps);\n    if (isChangeGauge) {\n      const valueRate = this.getValueRate();\n      if (this.props.enableAnimation && this.state.valueBefore !== valueRate) {\n        const subValue = (valueRate - this.state.valueBefore);\n        const time = (Math.abs(subValue) * 100) || 1;\n        const optr = (subValue > 0) ? 0.01 : -0.01;\n        const timeout = (this.props.animationTimeout / time);\n\n        this.clearLastAnimator();\n        this.animator(this.state.valueBefore, optr, valueRate, timeout, newState);\n      } else {\n        this.drawProgress(this.getValueRate(), newState);\n      }\n      this.refreshContext(newState);\n    }\n  }\n\n  getNewState = (newProps = {}, oldProps = {}, enableRefresh = false) => {\n    const newState = {};\n\n    if (newProps.style !== oldProps.style) {\n      newState.style = Object.assign({ WebkitUserSelect: 'none', MozUserSelect: 'none' }, newProps.style || {});\n    }\n    const isChange = (\n      !this.state ||\n      enableRefresh ||\n      newProps.size !== oldProps.size ||\n      newProps.theme !== oldProps.theme ||\n      newProps.mode !== oldProps.mode\n    );\n\n    if (isChange) {\n      const size = newProps.size || this.props.size;\n      const mode = newProps.mode || this.props.mode;\n      const theme = newProps.theme || this.props.theme;\n      const sizeInfo = {\n        borderWidth: size * 0.05,\n        barWidth: size * 0.1\n      };\n      const colorInfo = {};\n      switch (mode) {\n        case 'progress': {\n          Object.assign(sizeInfo, {\n            title: size * 0.15,\n            value: size * 0.15,\n            unit: size * 0.15\n          });\n          Object.assign(colorInfo, { pen: 'transparent' });\n          break;\n        }\n        default: {\n          Object.assign(sizeInfo, {\n            title: size * 0.12,\n            value: size * 0.15,\n            unit: size * 0.15\n          });\n          Object.assign(colorInfo, { pen: 'red' });\n          break;\n        }\n      }\n\n      switch (theme) {\n        case 'light': {\n          Object.assign(colorInfo, {\n            background: '#efefef',\n            defaultBar: '#ababab',\n            centerCircle: '#ffffff',\n            text: '#000000',\n            graduation: '#000000',\n            border: '#efefef'\n          });\n          break;\n        }\n        case 'dark': {\n          Object.assign(colorInfo, {\n            pen: 'red',\n            background: '#2e2e2e',\n            defaultBar: '#c0c0c0',\n            centerCircle: '#000000',\n            text: '#ffffff',\n            graduation: '#ffffff',\n            border: '#000000'\n          });\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n      Object.assign(newState, { colorInfo, sizeInfo });\n    }\n\n    return newState;\n  }\n\n  getValueRate = () => {\n    const {\n      scaleList,\n      minValue,\n      value\n    } = this.props;\n\n    if (scaleList && scaleList.length > 0) {\n      const scaleNumber = scaleList.length;\n      const intervalScale = (2.25 - 0.75) / scaleNumber;\n\n      let tmpScale = 0;\n      let tmpMinValue = minValue || 0;\n      const tmpValue = value || 0;\n      for (let i = 0; i < scaleNumber; i += 1) {\n        const quantity = scaleList[i].quantity || 0;\n        const scale = scaleList[i].scale || 0;\n        const maxScaleValue = (tmpMinValue + (quantity * scale));\n\n        if (maxScaleValue >= tmpValue) {\n          tmpScale += ((tmpValue - tmpMinValue) / (quantity * scale)) * intervalScale;\n          break;\n        }\n        tmpScale += intervalScale;\n        tmpMinValue += (quantity * scale);\n      }\n\n      let rateValue = parseFloat((((tmpScale * 200) / 3) * 0.01).toFixed(2));\n      if (rateValue < 0) {\n        rateValue = 0.00;\n      } else if (rateValue > 1) {\n        rateValue = 1.00;\n      }\n      return rateValue;\n    }\n\n    return 0.00;\n  }\n\n  isChangeGauge = (newProps = {}, oldProps = {}) => {\n    return (\n      newProps.style !== oldProps.style ||\n      newProps.theme !== oldProps.theme ||\n      newProps.mode !== oldProps.mode ||\n      newProps.size !== oldProps.size ||\n      newProps.colorInfo !== oldProps.colorInfo ||\n      newProps.title !== oldProps.title ||\n      newProps.unit !== oldProps.unit ||\n      newProps.enableColorful !== oldProps.enableColorful ||\n      newProps.scaleList !== oldProps.scaleList ||\n      newProps.minValue !== oldProps.minValue ||\n      newProps.value !== oldProps.value\n    );\n  }\n\n\n  refreshContext = (newState = {}) => {\n    this.setState(newState);\n  }\n\n  drawProgress = (valueRate, newState = {}) => {\n    const {\n      size,\n      mode,\n      enableColorful,\n      title,\n      unit,\n      scaleList,\n      minValue,\n      value\n    } = this.props;\n\n    const sizeInfo = newState.sizeInfo || this.state.sizeInfo;\n    const colorInfo = newState.colorInfo || this.state.colorInfo;\n\n    const gaugeDOM = this.gaugue;\n    if (gaugeDOM) {\n      Object.assign(gaugeDOM, { width: size, height: size });\n      const scaleNumber = (scaleList.length > 0) ? scaleList.length : 1;\n\n      const gaugeCTX = gaugeDOM.getContext('2d');\n\n      const gaugeHalfWidth = gaugeDOM.width / 2;\n      const gaugeHalfHeight = gaugeDOM.height / 2;\n      const radiusWidth = (gaugeDOM.width / 2) - sizeInfo.borderWidth;\n      const scaleInterval = (2.25 - 0.75) / scaleNumber;\n      // progress bar\n      gaugeCTX.lineCap = 'round';\n\n      switch (mode) {\n        case 'progress': {\n          // background ring\n          gaugeCTX.beginPath();\n          gaugeCTX.lineWidth = 0;\n          gaugeCTX.fillStyle = colorInfo.background;\n          gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth, 0, 2 * Math.PI);\n          gaugeCTX.fill();\n\n          gaugeCTX.beginPath();\n          gaugeCTX.lineWidth = 0;\n          gaugeCTX.fillStyle = colorInfo.centerCircle;\n          gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth - sizeInfo.barWidth, 0.75 * Math.PI, 2.25 * Math.PI);\n          gaugeCTX.fill();\n\n          gaugeCTX.font = `bold ${sizeInfo.value}px Arial`;\n          gaugeCTX.textAlign = 'center';\n          gaugeCTX.fillStyle = colorInfo.text;\n          gaugeCTX.fillText(`${value}${unit}`, gaugeHalfWidth, gaugeHalfHeight);\n\n          gaugeCTX.font = `bold ${sizeInfo.title}px Arial`;\n          gaugeCTX.textAlign = 'center';\n          gaugeCTX.fillStyle = colorInfo.text;\n          gaugeCTX.fillText(title, gaugeHalfWidth, (gaugeHalfHeight + radiusWidth) - (sizeInfo.barWidth / 2));\n\n          // progress bar\n          if (enableColorful) {\n            gaugeCTX.beginPath();\n            gaugeCTX.lineWidth = sizeInfo.barWidth;\n            gaugeCTX.strokeStyle = colorInfo.defaultBar;\n            gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth - (sizeInfo.barWidth / 2), 0.75 * Math.PI, 2.25 * Math.PI);\n            gaugeCTX.stroke();\n          }\n\n          const tmpValue = valueRate * 1.5;\n          for (let i = 0; i < scaleNumber; i += 1) {\n            const startAngle = (0.75 + (i * scaleInterval)) * Math.PI;\n            const endAngle = (0.75 + ((i + 1) * scaleInterval)) * Math.PI;\n            const startColor = scaleList[i].startColor;\n            const endColor = scaleList[i].endColor;\n\n            const isVauleInterval = (((i + 1) * scaleInterval) >= tmpValue);\n            if (enableColorful) {\n              gaugeCTX.beginPath();\n              const tmpScale = isVauleInterval ? ((0.75 + tmpValue) * Math.PI) : endAngle;\n              const newRadiusWidth = (radiusWidth - (sizeInfo.barWidth / 2));\n              const barColor = gaugeCTX.createLinearGradient(\n                gaugeHalfWidth + (newRadiusWidth * Math.cos(startAngle)),\n                gaugeHalfHeight + (newRadiusWidth * Math.sin(startAngle)),\n                gaugeHalfWidth + (newRadiusWidth * Math.cos(tmpScale)),\n                gaugeHalfHeight + (newRadiusWidth * Math.sin(tmpScale))\n              );\n\n              barColor.addColorStop(0, startColor);\n              barColor.addColorStop(1.0, endColor);\n\n              gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth - (sizeInfo.barWidth / 2), startAngle, tmpScale);\n              gaugeCTX.lineWidth = sizeInfo.barWidth;\n              gaugeCTX.strokeStyle = barColor;\n              gaugeCTX.stroke();\n\n              if (isVauleInterval) {\n                break;\n              }\n            } else if (isVauleInterval) {\n              gaugeCTX.beginPath();\n              const barColor = gaugeCTX.createRadialGradient(\n                gaugeHalfWidth,\n                gaugeHalfHeight,\n                radiusWidth,\n                gaugeHalfWidth,\n                gaugeHalfHeight,\n                radiusWidth - (sizeInfo.barWidth / 2)\n              );\n\n              gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth - (sizeInfo.barWidth / 2), 0.75 * Math.PI, 2.25 * Math.PI);\n              gaugeCTX.lineWidth = sizeInfo.barWidth;\n              gaugeCTX.strokeStyle = barColor;\n              gaugeCTX.stroke();\n              break;\n            }\n          }\n\n          break;\n        }\n        default: {\n          const graduationPosition = radiusWidth;\n          const graduationLength = sizeInfo.barWidth;\n          const graduationSize = gaugeDOM.width * 0.01;\n          const graduationFontSize = Math.floor(gaugeDOM.width * 0.08);\n          const penHalfWidth = gaugeDOM.width * 0.02;\n\n          gaugeCTX.beginPath();\n          gaugeCTX.lineWidth = 0;\n          gaugeCTX.fillStyle = colorInfo.centerCircle;\n          gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth, 0 * Math.PI, 2 * Math.PI);\n          gaugeCTX.fill();\n\n          let graduationValue = minValue || 0;\n          for (let i = 0; i < scaleNumber; i += 1) {\n            const startAngle = (0.75 + (i * scaleInterval)) * Math.PI;\n            const endAngle = (0.75 + ((i + 1) * scaleInterval)) * Math.PI;\n            const quantity = scaleList[i].quantity;\n            const scale = scaleList[i].scale;\n            const intervalAngle = (endAngle - startAngle) / quantity;\n            const startColor = scaleList[i].startColor;\n            const endColor = scaleList[i].endColor;\n\n            if (enableColorful) {\n              gaugeCTX.beginPath();\n              const barColor = gaugeCTX.createLinearGradient(\n                gaugeHalfWidth + ((radiusWidth - (graduationLength / 4)) * Math.cos(startAngle)),\n                gaugeHalfHeight + ((radiusWidth - (graduationLength / 4)) * Math.sin(startAngle)),\n                gaugeHalfWidth + ((radiusWidth - (graduationLength / 4)) * Math.cos(endAngle)),\n                gaugeHalfHeight + ((radiusWidth - (graduationLength / 4)) * Math.sin(endAngle))\n              );\n\n              barColor.addColorStop(0, startColor);\n              barColor.addColorStop(1.0, endColor);\n              gaugeCTX.arc(gaugeHalfWidth, gaugeHalfHeight, radiusWidth - (graduationLength / 4), startAngle, endAngle);\n              gaugeCTX.lineWidth = graduationLength / 2;\n              gaugeCTX.strokeStyle = barColor;\n              gaugeCTX.stroke();\n            }\n\n            for (let j = 0; j <= quantity; j += 1) {\n              const angle = (j * intervalAngle) + startAngle;\n\n              gaugeCTX.beginPath();\n              gaugeCTX.lineWidth = graduationSize;\n              gaugeCTX.strokeStyle = colorInfo.graduation;\n              gaugeCTX.moveTo(\n                gaugeHalfWidth + (graduationPosition * Math.cos(angle)),\n                gaugeHalfHeight + (graduationPosition * Math.sin(angle))\n              );\n              gaugeCTX.lineTo(\n                gaugeHalfWidth + ((graduationPosition - (graduationLength / 2)) * Math.cos(angle)),\n                gaugeHalfHeight + ((graduationPosition - (graduationLength / 2)) * Math.sin(angle))\n              );\n              gaugeCTX.stroke();\n              gaugeCTX.closePath();\n\n              const graduationText = `${(graduationValue + (j * scale))}`;\n              gaugeCTX.font = `${graduationFontSize}px Arial`;\n              gaugeCTX.textAlign = 'center';\n              gaugeCTX.fillStyle = colorInfo.graduation;\n              gaugeCTX.fillText(\n                graduationText,\n                gaugeHalfWidth + (\n                  (graduationPosition - ((graduationLength / 2) + graduationFontSize)) *\n                  Math.cos(angle)\n                ),\n                gaugeHalfHeight + (\n                  (graduationPosition - ((graduationLength / 2) + graduationFontSize)) *\n                  Math.sin(angle)\n                )\n              );\n            }\n            graduationValue += (scale * quantity);\n          }\n\n          gaugeCTX.font = `bold ${sizeInfo.title}px Arial`;\n          gaugeCTX.textAlign = 'center';\n          gaugeCTX.fillStyle = colorInfo.text;\n          gaugeCTX.fillText(\n            title,\n            gaugeHalfWidth + (graduationLength * Math.cos(1.5 * Math.PI)),\n            gaugeHalfHeight + (graduationLength * Math.sin(1.5 * Math.PI))\n          );\n\n          gaugeCTX.font = `bold ${sizeInfo.unit}px Arial`;\n          gaugeCTX.textAlign = 'center';\n          gaugeCTX.fillStyle = colorInfo.text;\n          gaugeCTX.fillText(\n            unit,\n            gaugeHalfWidth + ((radiusWidth / 2) * Math.cos(0.5 * Math.PI)),\n            gaugeHalfHeight + ((radiusWidth / 2) * Math.sin(0.5 * Math.PI))\n          );\n\n          gaugeCTX.font = `bold ${sizeInfo.value}px Arial`;\n          gaugeCTX.textAlign = 'center';\n          gaugeCTX.fillStyle = colorInfo.text;\n          gaugeCTX.fillText(\n            value,\n            gaugeHalfWidth,\n            (gaugeHalfHeight + radiusWidth) - (sizeInfo.barWidth / 2)\n          );\n\n          let valueAngle = (((2.25 - 0.75) * valueRate) + 0.75) * Math.PI;\n          gaugeCTX.beginPath();\n          gaugeCTX.lineWidth = 0;\n          gaugeCTX.fillStyle = colorInfo.pen;\n          gaugeCTX.moveTo(\n            gaugeHalfWidth + (radiusWidth * Math.cos(valueAngle)),\n            gaugeHalfHeight + (radiusWidth * Math.sin(valueAngle))\n          );\n\n          valueAngle += (0.5 * Math.PI);\n          gaugeCTX.lineTo(\n            gaugeHalfWidth + (penHalfWidth * Math.cos(valueAngle)),\n            gaugeHalfHeight + (penHalfWidth * Math.sin(valueAngle))\n          );\n\n          valueAngle -= (1 * Math.PI);\n          gaugeCTX.lineTo(\n            gaugeHalfWidth + (penHalfWidth * Math.cos(valueAngle)),\n            gaugeHalfHeight + (penHalfWidth * Math.sin(valueAngle))\n          );\n\n          valueAngle += (0.5 * Math.PI);\n          gaugeCTX.lineTo(\n            gaugeHalfWidth + (radiusWidth * Math.cos(valueAngle)),\n            gaugeHalfHeight + (radiusWidth * Math.sin(valueAngle))\n          );\n          gaugeCTX.fill();\n          // center point\n          gaugeCTX.beginPath();\n          gaugeCTX.lineWidth = 0;\n          gaugeCTX.fillStyle = colorInfo.pen;\n          gaugeCTX.arc(\n            gaugeHalfWidth,\n            gaugeHalfHeight,\n            penHalfWidth,\n            0,\n            2 * Math.PI\n          );\n          gaugeCTX.fill();\n\n          break;\n        }\n      }\n\n      gaugeCTX.beginPath();\n      const borderColor = gaugeCTX.createRadialGradient(\n        gaugeHalfWidth,\n        gaugeHalfHeight,\n        radiusWidth + sizeInfo.borderWidth,\n        gaugeHalfWidth,\n        gaugeHalfHeight,\n        radiusWidth\n      );\n\n      borderColor.addColorStop(0, colorInfo.border);\n      borderColor.addColorStop(0.5, '#ffffff');\n      borderColor.addColorStop(1, colorInfo.border);\n\n      gaugeCTX.lineWidth = sizeInfo.borderWidth;\n      gaugeCTX.arc(\n        gaugeHalfWidth,\n        gaugeHalfHeight,\n        radiusWidth + (sizeInfo.borderWidth / 2),\n        0 * Math.PI,\n        2 * Math.PI\n      );\n      gaugeCTX.strokeStyle = borderColor;\n      gaugeCTX.stroke();\n      this.state.valueBefore = valueRate;\n    }\n  }\n\n  clearLastAnimator = () => {\n    if (this.animatorTimeout) {\n      clearTimeout(this.animatorTimeout);\n      this.animatorTimeout = undefined;\n    }\n  }\n\n  animator = (lastValue, optr, finalValue, timeout, newState) => {\n    let value = lastValue + optr;\n\n    if ((optr > 0 && value >= finalValue) || (optr < 0 && value <= finalValue)) {\n      value = finalValue;\n    }\n\n    this.drawProgress(value, newState);\n    if (value !== finalValue) {\n      this.animatorTimeout = setTimeout(() => { this.animator(value, optr, finalValue, timeout, newState); }, timeout);\n    }\n  }\n\n  render() {\n    const { style } = this.state;\n    return (<canvas style={style} ref={(g) => { this.gaugue = g; }} />);\n  }\n}\n\nexport default Gauge;\n"]}